@page "/{sessionId?}"
@using Microsoft.AspNetCore.SignalR.Client
@using SSLValidator.Shared
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (domains == null)
{
	<p class="text-center"><em>Loading...</em></p>
}
else
{
	<h2 class="marquee">
	<span>
		<h1></h1>
	</span>
</h2>
	<div class="modal fade" id="domainModalToggle" tabindex="-1" aria-labelledby="domainModalToggleLabel"
	aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="domainModalToggleLabel">Domains</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<table class="table">
					<thead>
						<tr>
							<th>Domain Name</th>
							<th>Domain Url</th>
							<th>Days until expired</th>
							<th>Threat level</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var domain in domains)
							{
								<tr>
									<td>@domain.DomainName</td>
									<td>@domain.Url</td>
									<td>@domain.DaysUntilExpiration</td>
									<td>@domain.ThreatLevel</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div class="modal-footer">
					<div class="d-flex justify-content-between w-100">
						<button type="button" 
                            class="btn btn-outline-success rounded-0"
                            data-bs-target="#domainModalToggle"
                            data-bs-toggle="modal"
                            data-bs-dismiss="modal"
                            @onclick="ToggleAddDomainModal"
                        >
							Add Domain
						</button>
						<div>
							<button type="button" class="btn btn-outline-danger rounded-0"
							data-bs-dismiss="modal">Close</button>
							<button type="button" class="btn btn-primary rounded-0">Save changes</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal fade" id="addDomainModalToggle" tabindex="-1" aria-labelledby="addDomainModalToggleLabel"
	aria-hidden="true">
		<div class="modal-dialog modal-xl">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="addDomainModalToggleLabel">Add domain</h5>
				</div>
				<div class="modal-body">
					<form>
						<div class="mb-3">
							<label for="domainName" class="form-label">Domain Name</label>
							<input @bind-value="domainPayload.DomainName" type="text" class="form-control" id="domainName"
							placeholder="Google" required>
						</div>
						<div class="mb-3">
							<label for="domainURL" class="form-label">Domain URL</label>
							<input @bind-value="domainPayload.URL" type="text" class="form-control" id="domainURL"
							placeholder="https://google.com" required>
						</div>
						@if (!string.IsNullOrWhiteSpace(errorMessage))
						{
							<p>
								@errorMessage
							</p>
						}
					</form>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-danger rounded-0" data-bs-dismiss="modal">Close</button>
					<button type="button" class="btn btn-success rounded-0" @onclick="AddDomain">Add Domain</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private IJSObjectReference? module;
	private string? result;
	private List<Domain>? domains;
	private string highestDomainExpirationThreatLevelClass = "threat__low";
	private HubConnection? hubConnection;
	[Parameter]
	public string? SessionId { get; set; }
	private DomainPayload domainPayload = new DomainPayload();
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		if (SessionId is null)
		{
			var sessionIdPath = await Http.GetStringAsync("Domain/get-session-id");
			NavigationManager.NavigateTo("/" + sessionIdPath);
		}

		hubConnection = new HubConnectionBuilder()
		.WithUrl(NavigationManager.ToAbsoluteUri("/domainhub"))
		.Build();

		hubConnection.On<List<Domain>>("ReceiveCurrentDomains", (currentDomains) =>
		{
			domains = currentDomains;
			var hasAnyHighThreatLevel = domains.Where(d => d.ThreatLevel == DomainExpirationThreatLevel.High).FirstOrDefault();
			if (hasAnyHighThreatLevel is not null)
			{
				highestDomainExpirationThreatLevelClass = hasAnyHighThreatLevel.ThreatLevelClass;
			}
			else
			{
				var hasAnyMediumThreatLevel = domains.Where(d => d.ThreatLevel == DomainExpirationThreatLevel.Medium).FirstOrDefault();
				if (hasAnyMediumThreatLevel is not null)
				{
					highestDomainExpirationThreatLevelClass = hasAnyMediumThreatLevel.ThreatLevelClass;
				}
			}
			StateHasChanged();
		});

		await hubConnection.StartAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/index.js");
			if (hubConnection is not null)
			{
				await hubConnection.SendAsync("GetCurrentDomains", SessionId);
			}
		}
		await SetThreatLevelBackground();
	}

	private async Task AddDomain()
	{
		var resp = await Http.PostAsync($"Domain/{SessionId}", JsonContent.Create(domainPayload));
		if (resp.IsSuccessStatusCode)
		{
			domainPayload = new DomainPayload();
            await ToggleAddDomainModal();
            await SetThreatLevelBackground();
		}
		else
		{
			errorMessage = await resp.Content.ReadAsStringAsync();
		}
	}

	private async Task SetThreatLevelBackground()
	{
		if (module is not null)
		{
			await module.InvokeVoidAsync("setBackgroundColour", highestDomainExpirationThreatLevelClass);
		}
	}
    
    private async Task ToggleAddDomainModal()
	{
		if (module is not null)
		{
			await module.InvokeVoidAsync("toggleAddDomainModal");
		}
	}
}
